
-------------------EXTRA TRIGGER LAB---------------


------------------------AFTER TRIGGER---------------


CREATE TABLE EMPLOYEEDETAILS
(
	EmployeeID Int Primary Key,
	EmployeeName Varchar(100) Not Null,
	ContactNo Varchar(100) Not Null,
	Department Varchar(100) Not Null,
	Salary Decimal(10,2) Not Null,
	JoiningDate DateTime Null
)

CREATE TABLE EmployeeLogs (
LogID INT PRIMARY KEY IDENTITY(1,1),
EmployeeID INT NOT NULL,
EmployeeName VARCHAR(100) NOT NULL,
ActionPerformed VARCHAR(100) NOT NULL,
ActionDate DATETIME NOT NULL
);





--1)Create a trigger that fires AFTER INSERT,UPDATE,and DELETE operationson the EmployeeDetails table to display the message "Employee record inserted", "Employee record updated", "Employee record deleted"

CREATE OR ALTER TRIGGER TR_AFTER_INSERT
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	PRINT('Employee record inserted')
END

INSERT INTO EMPLOYEEDETAILS VALUES
(1,'VRAJ',132456790,'IT',120000,'2020-05-01')

CREATE OR ALTER TRIGGER TR_AFTER_DELETE
ON EMPLOYEEDETAILS
AFTER DELETE
AS
BEGIN
	PRINT('Employee record DELETED')
END


CREATE OR ALTER TRIGGER TR_AFTER_UPDATE
ON EMPLOYEEDETAILS
AFTER UPDATE
AS
BEGIN
	PRINT('Employee record UPDATED')
END

DROP TRIGGER TR_AFTER_INSERT
DROP TRIGGER TR_AFTER_UPDATE
DROP TRIGGER TR_AFTER_DELETE


--2)	Create a trigger that fires AFTER INSERT,UPDATE,and DELETE operationson the EmployeeDetails table to log all operations into the EmployeeLog table.

CREATE OR ALTER TRIGGER TR_AFTER_INSERT_LOG
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @EID INT;
	DECLARE @ENAME VARCHAR(50)

	SELECT @EID=EMPLOYEEID FROM INSERTED
	SELECT @ENAME =EmployeeName FROM inserted

	INSERT INTO EmployeeLogs(EMPLOYEEID,EMPLOYEENAME,ActionPerformed,ActionDate)
	VALUES
	(@EID,@ENAME,'INSERT',GETDATE())
END

CREATE OR ALTER TRIGGER TR_AFTER_UPDATE_LOG
ON EMPLOYEEDETAILS
AFTER UPDATE
AS
BEGIN
	DECLARE @EID INT;
	DECLARE @ENAME VARCHAR(50)

	SELECT @EID=EMPLOYEEID FROM INSERTED
	SELECT @ENAME =EmployeeName FROM inserted

	INSERT INTO EmployeeLogs(EMPLOYEEID,EMPLOYEENAME,ActionPerformed,ActionDate)
	VALUES
	(@EID,@ENAME,'UPDATE',GETDATE())
END

CREATE OR ALTER TRIGGER TR_AFTER_DELETE_LOG
ON EMPLOYEEDETAILS
AFTER DELETE
AS
BEGIN
	DECLARE @EID INT;
	DECLARE @ENAME VARCHAR(50)

	SELECT @EID=EMPLOYEEID FROM INSERTED
	SELECT @ENAME =EmployeeName FROM inserted

	INSERT INTO EmployeeLogs(EMPLOYEEID,EMPLOYEENAME,ActionPerformed,ActionDate)
	VALUES
	(@EID,@ENAME,'DELETE',GETDATE())
END



DROP TRIGGER TR_AFTER_INSERT_LOG
DROP TRIGGER TR_AFTER_UPDATE_LOG
DROP TRIGGER TR_AFTER_DELETE_LOG

--3)	Create a trigger that fires AFTER INSERT to automatically calculate the joining bonus 
--(10% of the salary) for new employees and update a bonus column in the EmployeeDetails table.

CREATE OR ALTER TRIGGER TR_UPDATE_JOINING_BONUS
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @SAL Decimal(10,2)
	DECLARE @EID INT

	SELECT @EID=EmployeeID FROM inserted
	SELECT @SAL=SALARY FROM inserted

	SET @SAL=@SAL+@SAL*0.1

	UPDATE EMPLOYEEDETAILS
	SET SALARY=@SAL
	WHERE EmployeeID=@EID
END


INSERT INTO EMPLOYEEDETAILS VALUES
(2,'NAINA',132456790,'CIVIL',200,'2020-05-01')

SELECT * FROM EMPLOYEEDETAILS

DROP TRIGGER TR_UPDATE_JOINING_BONUS


--4)Create a trigger to ensure that the JoiningDate is automatically set to the currentdate 
--if it is NULL during an INSERT operation.

CREATE OR ALTER TRIGGER TR_UPDATE_JOININGDATE
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @EID INT
	DECLARE @DATE DATETIME

	SELECT @EID=EmployeeID FROM inserted
	SELECT @DATE=JoiningDate FROM INSERTED

	UPDATE EMPLOYEEDETAILS
	SET joiningdate=getDate()
	WHERE EmployeeID=@EID AND @date is NULL
END

INSERT INTO EMPLOYEEDETAILS VALUES
(3,'TANISHA',132456790,'IT',2000000,NULL)

SELECT * FROM EMPLOYEEDETAILS

DROP TRIGGER TR_UPDATE_JOININGDATE

--5)Create a trigger that ensure that Contact No is valid during insert (Like ContactNo length is 10)

CREATE OR ALTER TRIGGER TR_CONTACT_VERIFICATION
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @EID INT
	DECLARE @NO Varchar(100)

	SELECT @EID=EmployeeID FROM inserted
	SELECT @NO=ContactNo FROM INSERTED

	if len(@no) != 10
	begin 
		delete EMPLOYEEDETAILS
		where EmployeeID=@EID
	end
END


INSERT INTO EMPLOYEEDETAILS VALUES
(4,'PUSHTI',1324567,'IT',2000000,NULL)

SELECT * FROM EMPLOYEEDETAILS

DROP TRIGGER TR_CONTACT_VERIFICATION

------------------------INSTEAD TRIGGER-----------------------


CREATE TABLE Movies (
MovieID INT PRIMARY KEY,
MovieTitle VARCHAR(255) NOT NULL,
ReleaseYear INT NOT NULL,
    Genre VARCHAR(100) NOT NULL,
    Rating DECIMAL(3, 1) NOT NULL,
    Duration INT NOT NULL
);


CREATE TABLE MoviesLog
(
	LogID INT PRIMARY KEY IDENTITY(1,1),
	MovieID INT NOT NULL,
	MovieTitle VARCHAR(255) NOT NULL,
	ActionPerformed VARCHAR(100) NOT NULL,
	ActionDate	DATETIME  NOT NULL
);


--1.	Create an INSTEAD OF trigger that fires on INSERT, UPDATE and DELETE operation on the Movies table. 
--For that, log all operations performed on the Movies table into MoviesLog.

CREATE OR ALTER  TRIGGER TR_INSTEAD_OF_INSERT_MOVIE
ON Movies
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @MID INT;
	DECLARE @TITLE VARCHAR(50)

	SELECT @MID=MovieID FROM INSERTED
	SELECT @TITLE =MOVIETITLE FROM inserted

	INSERT INTO MOVIELOG (MOVIEID,MOVIETITLE,ACTIONPERFORMED,ACTIONDATE)
	VALUES
	(@MID,@TITLE,'INSERT',GETDATE())
END


CREATE OR ALTER  TRIGGER TR_INSTEAD_OF_UPDATE_MOVIE
ON Movies
INSTEAD OF UPDATE
AS
BEGIN
	DECLARE @MID INT;
	DECLARE @TITLE VARCHAR(50)

	SELECT @MID=MovieID FROM INSERTED
	SELECT @TITLE =MOVIETITLE FROM inserted

	INSERT INTO MoviesLog (MOVIEID,MOVIETITLE,ACTIONPERFORMED,ACTIONDATE)
	VALUES
	(@MID,@TITLE,'UPDATE',GETDATE())
END


CREATE OR ALTER  TRIGGER TR_INSTEAD_OF_DELETE_MOVIE
ON Movies
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MID INT;
	DECLARE @TITLE VARCHAR(50)

	SELECT @MID=MovieID FROM INSERTED
	SELECT @TITLE =MOVIETITLE FROM inserted

	INSERT INTO MoviesLog (MOVIEID,MOVIETITLE,ACTIONPERFORMED,ACTIONDATE)
	VALUES
	(@MID,@TITLE,'DELETE',GETDATE())
END

DROP TRIGGER TR_INSTEAD_OF_DELETE_MOVIE
DROP TRIGGER TR_INSTEAD_OF_UPDATE_MOVIE
DROP TRIGGER TR_INSTEAD_OF_INSERT_MOVIE


--2.Create a trigger that only allows to insert movies for which Rating is greater than 5.5 .
CREATE OR ALTER TRIGGER TR_ALLOW_RAINGS_GT_5
ON MOVIES
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO MOVIES(MOVIEID,MOVIETITLE,RELEASEYEAR,GENRE,RATING,DURATION)
	SELECT MOVIEID,MOVIETITLE,RELEASEYEAR,GENRE,RATING,DURATION FROM INSERTED
	WHERE RATING > 5.5
END

INSERT INTO MOVIES VALUES(1,'THE NONE',2002,'HORROR',5.6,5.6)
INSERT INTO MOVIES VALUES(2,'DDLJ',2005,'GOOD',5,5)

SELECT * FROM MOVIES

DROP TRIGGER TR_ALLOW_RATINGS_GT_5


--3.Create trigger that prevent duplicate 'MovieTitle' of Movies table and log details of it in MoviesLog table.

CREATE OR ALTER TRIGGER TR_PREVENT_DUPLICATE
ON Movies
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @NAME VARCHAR(100)
	SELECT @NAME=MOVIETITLE FROM inserted

	IF EXISTS(
		SELECT 1 FROM Movies M
		JOIN INSERTED I
		ON M.MovieID=I.MovieTitle
		WHERE M.MovieID=I.MovieID
	)
	BEGIN
		INSERT INTO MoviesLog (MovieID, MovieTitle, ActionPerformed, ActionDate)
        SELECT i.MovieID, i.MovieTitle, 'Duplicate Attempt', GETDATE()
        FROM inserted i;
	END
END

DROP TRIGGER TR_PREVENT_DUPLICATE

INSERT INTO MOVIES VALUES(1,'THE NONE',2002,'HORROR',5.6,5.6)

--4.Create trigger that prevents to insert pre-release movies.

CREATE OR ALTER TRIGGER TR_PRIVENT_PRERELEASE
ON MOVIES
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO MOVIES(MOVIEID,MOVIETITLE,RELEASEYEAR,GENRE,RATING,DURATION)
	SELECT MOVIEID,MOVIETITLE,RELEASEYEAR,GENRE,RATING,DURATION FROM INSERTED
	WHERE RELEASEYEAR < YEAR(GETDATE())
END


INSERT INTO MOVIES VALUES(1,'THE NONE',2030,'HORROR',5.6,5.6)

SELECT * FROM Movies

--5.Develop a trigger to ensure that the Duration of a movie cannot be updated to a value 
--greater than 120 minutes (2 hours) to prevent unrealistic entries.

CREATE OR ALTER TRIGGER TR_DURATION_PREVENT
ON MOVIES
FOR UPDATE
AS
BEGIN
	DECLARE @MovieID INT;
    DECLARE @MovieTitle VARCHAR(255);
    DECLARE @NewDuration INT;
    DECLARE @OldDuration INT;

	SELECT @MovieID = MovieID, @MovieTitle = MovieTitle, @OldDuration = Duration
    FROM deleted;

	SELECT @NewDuration = Duration
    FROM inserted;

	IF @NewDuration > 120
    BEGIN
        INSERT INTO MoviesLog (MovieID, MovieTitle, ActionPerformed, ActionDate)
        VALUES (@MovieID, @MovieTitle, 'Attempted to update duration to over 120 minutes', GETDATE());
    END

END

SELECT * FROM MoviesLog

UPDATE MOVIES
SET Duration=150
WHERE MovieID=1